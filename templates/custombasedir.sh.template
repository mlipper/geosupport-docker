#!/usr/bin/env bash

set -Eeuo pipefail

this_dir="$(dirname "$(readlink -vf "$BASH_SOURCE")")"
this_file="$(basename "$0")"

cd "${this_dir}"

#
# Globals
#

VERSION="@image_tag@"
PROJECTDIR="$(pwd)"
DOCKERDIR=/opt/geosupport
declare -a FILES=()
FILES=( geosupport geosupport.env )
CUSTOMDIR=/gis/geosupport/server
GOAT_VERSION="@geosupport_fullversion@"
OUTDIR="${PROJECTDIR}/out/${VERSION}"
OUTFILE="${OUTDIR}/geosupport-server-${GOAT_VERSION}.tgz"
WORKDIR="${PROJECTDIR}/temp"
SRCDIR="${WORKDIR}/${VERSION}"

dexists() {
  [[ -d "$1" ]] || die "Directory $1 does not exist."
}

die() {
  echo "[ERROR] $1"
  exit 1
}

compress() {
  mkdir -p "${SRCDIR}" \
    && dexists "${SRCDIR}" \
    && cd "${SRCDIR}"
  fexists "${OUTDIR}/geosupport-${GOAT_VERSION}.tgz" \
    && tar xzvf "${OUTDIR}/geosupport-${GOAT_VERSION}.tgz"
  for f in "${FILES[@]}"; do
    srcfile="${SRCDIR}/version-${GOAT_VERSION}/bin/${f}"
    fexists "${srcfile}"
    #
    # sed usage notes:
    #
    #   '-i.orig' backs up original files before in-place substitution
    #   Use '_' as a delimitter since the pattern contains '/'
    #   'g' global line match
    #
    echo "[INFO] -> sed -i.orig "s_${DOCKERDIR}_${CUSTOMDIR}_g" "${srcfile}""
    sed -i.orig "s_${DOCKERDIR}_${CUSTOMDIR}_g" "${srcfile}"
    echo "[INFO] -> mv "${srcfile}.orig" "${WORKDIR}""
    mv "${srcfile}.orig" "${WORKDIR}"
  done
  echo "[INFO] -> tar czvf "${OUTFILE}" -C "${SRCDIR}" "version-${GOAT_VERSION}""
  tar czvf "${OUTFILE}" -C "${SRCDIR}" "version-${GOAT_VERSION}" \
      || die "Could not create ${OUTFILE}."
  # rm -rf "${WORKDIR}" \
  #     || die "Could not remove ${WORKDIR}."
  echo "[INFO] done."
}

fexists() {
  [[ -f "$1" ]] || die "File $1 does not exist."
}

main() {
    while [ $# -gt 0 ]; do
        case "$1" in
            help)
                usage | more && exit 0;
                ;;
            show)
                show && exit 0;
                ;;
            --path=*)
                CUSTOMDIR="${1##--path=}"; shift
                ;;
            --*)
                die "Invalid option: $1"; shift
                ;;
            *)
                compress
                ;;
        esac
    done
}

show() {
cat <<- EOF
   CUSTOMDIR: ${CUSTOMDIR}
GOAT_VERSION: ${GOAT_VERSION}
      OUTDIR: ${OUTDIR}
     OUTFILE: ${OUTFILE}
  PROJECTDIR: ${PROJECTDIR}
      SRCDIR: ${SRCDIR}
     VERSION: ${VERSION}
     WORKDIR: ${WORKDIR}

EOF
}

usage() {
cat <<- EOF
  Customize the path of the GEOSUPPORT_BASEDIR directory used to install
  and configure Geosupport.

  Usage: ${this_file} [help]
    <<no arguments>>  Creates a tgz file with the Geosupport Linux
                      distribution using the default value of the
                      CUSTOMDIR global for the install path:
                      ${CUSTOMDIR}

    help              Show this usage message and exit

  Options:
    --path=<path>     Absolute path for CUSTOMDIR (GEOSUPPORT_BASEDIR).
                      If not given, defaults to ${CUSTOMDIR}.

  Notes:
    Before running this script, the distribution must be generated using
    the desired release configuration. E.g.,
    1. Edit ${PROJECTDIR}/release.conf as needed.
    2. In a bash shell, change to the root project directory.
        cd ${PROJECTDIR}
    3. Clean and regenerate the build script.
        ./release.sh clean generate
    4. Build the distribution.
        ./build/build.sh build
    5. Export the distribution from the image/container to the local filesystem.
        ./build/build.sh exportdist
    6. Run this script.
        (Adjust the path of the CUSTOMDIR global, first, if needed)
        ./build/custombasedir.sh

  Normally, the installation path for Geosupport (GEOSUPPORT_BASEDIR) is
  set to '/opt/geosupport'.

  This script uses the value of global variable CUSTOMDIR which, by default,
  is set to '/gis/geosupport/server'.

  The following files from the generated distribution's bin directory are
  modified:
    version-@geosupport_fullversion@/bin/geosupport.env
    version-@geosupport_fullversion@/bin/geosupport

  It is assumed that the default generated distribution is here:
    ${PROJECTDIR}/out/${VERSION}/geosupport-@geosupport_fullversion@

  If this script completes successfully, the customized distribution will
  be here:
    ${PROJECTDIR}/out/${VERSION}/geosupport-server-@geosupport_fullversion@

EOF
}

main "$@"
