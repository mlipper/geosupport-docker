#!/usr/bin/env bash

set -Eeuo pipefail

this_dir="$(dirname "$(readlink -vf "$BASH_SOURCE")")"
this_file="$(basename "$0")"

cd "${this_dir}"

#
# Globals
#

declare -a actions=()
declare -a tags=()
declare -a variants=()

DEFAULT_EXPORTDIR="$(readlink -vf ../out)"
DEFAULT_TAG="@image_tag@"
DEFAULT_VARIANT=default
DIST_VARIANT=dist
FULLVER="@geosupport_fullversion@"
IMAGE_NAME="@image_name@"
IMAGE_TAG="@image_tag@"
REPO_NAME="@repo_name@"

#
# Functions
#

die() {
    echo "$*" 1>&2
    exit 1
}

usage() {
    local this_file
    this_file="$(basename "${BASH_SOURCE[0]}")"
cat <<- EOF

Usage: ${this_file} COMMAND [OPTIONS]

Build or remove ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG} images.
Create or remove ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG} volumes.

Commands:

  build         Builds ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG} to the local
                registry using the following template:

                ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}[-<variant>]

            NOTES:

                The --variant=default option is a special case in
                which the template will be:

                ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}

                Builds are always done against the local repository.

  createvol     Creates one or more named volumes whose names and
                container directories are determined by the specified
                --variants option.

  exportdist    Copy repackaged Geosupport distribution file
                /dist/geosupport-${FULLVER}.tgz to the
                host directory specified by the --exportdir=<hostdir>
                option.

                If the --exportdir=<hostdir> option is not given, <hostdir>
                defaults to '${DEFAULT_EXPORTDIR}'.

  help          Show this usage message and exit.

  removeimage   Deletes one or more whose names are determined by the
                specified --variants.

  removevol     Deletes one or more named volumes whose names are
                determined by the specified --variants option.

Options:

  --exportdir   The host directory where the Geosupport distribution
                file will be copied when running the 'exportdist' command.

                If not given, defaults to '${DEFAULT_EXPORTDIR}'.

  --latest      When given with the 'build' command, successfully built images
                and image variants will then be tagged as 'latest(-<variant>)'.

                When given with the 'removeimage' command, any image with a
                matching 'latest(-<variant>)' tag will be removed.

  --tag         Image tag to use with build command. If not specified, image is
                built with tag ${DEFAULT_TAG}. If the '--latest' argument has
                been provided, this image will also be tagged as
                'latest(-<variant>)'.

  --variant     Image variant to build. This option can be specified
                multiple times and order is important: see the DEPENDENCIES
                note below.

                The following variants are supported:

                dist
                       image name: ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-dist
                      volume name: geosupport-dist-${FULLVER}
                    volume source: /dist

                default
                       image name: ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}
                      volume name: geosupport-${FULLVER}
                    volume source: \$GEOSUPPORT_HOME

                If this option is not given, the specified action(s) is applied
                to both 'dist' and 'default' variants. For the 'build' command,
                order is: 'dist', 'default'. For the 'removeimage' command,
                is: 'default', 'dist'.

            DEPENDENCIES:

                Building the default variant requires that the dist variant
                be available from the local repository. If dist is not available
                already, use the following when building the variant:

                ${this_file} --variant=dist --variant=default

EOF
}

#
# $1 repository
# $2 image
# $3 tag
# $4 variant
#
_imageString() {
    local repo="$1"
    local image="$2"
    local tag="$3"
    local variant="$(_fixVariant $4)"
    echo -n "${repo}/${image}:${tag}${variant}"
}

#
# $1 variant name
#
_fixVariant() {
    local variant="$1"
    if [[ "${variant}" == "${DEFAULT_VARIANT}" ]]; then
        variant=""
    else
        variant="-${variant}"
    fi
    echo -n "${variant}"
}

#
# $1 image string (includes repo prefix)
# $2 Dockerfile file
#
buildImage() {
    local image_string="$1"
    local file="$2"
    docker build -t "${image_string}"  -f "${file}" .
}

#
# $1 name
# $2 target
# $3 image string (includes repo prefix)
# $4 command
#
createVol() {
    local name="$1"
    local target="$2"
    local image_string="$3"
    local command="$4"
    docker volume create "${name}"
    if [[ -z "${command}" ]]; then
        docker run --rm --mount "source=${name},target=${target}"  "${image_string}"
    else
        docker run --rm --mount "source=${name},target=${target}"  "${image_string}" "${command}"
    fi
}

#
# $1 hostdir
#
exportDist() {
    local hostdir="$1"
    mkdir -p "${hostdir}"
    docker build -t gsdexport:latest -<<EOF
# syntax=docker/dockerfile:1
FROM busybox:glibc
RUN mkdir -p /xfer
COPY --from=${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-dist \
        /dist/geosupport.tgz \
        /dist/geosupport-${FULLVER}.tgz
CMD ["cp", "-v", "/dist/geosupport-${FULLVER}.tgz", "/xfer"]
EOF
    docker run --rm -it --volume="${hostdir}:/xfer:rw" gsdexport:latest
    docker rmi gsdexport:latest
}

#
# $1 name
#
removeImage() {
    local name="$1"
    docker image rm "${name}"
}

#
# $1 name
#
removeVol() {
    local name="$1"
    docker volume rm "${name}"
}

#
# $1 source image
# $2 tag
#
tagImage() {
    local source_image="$1"
    local tag="$2"
    docker tag "${source_image}" "${tag}"
}

main() {

    if [ $# -eq 0 ]; then
        usage
        exit 0
    fi

    local exportdir=
    local exported=
    local tag_as_latest=

    while [ $# -gt 0 ]; do
        case "$1" in
            build)
                actions+=( "build" ); shift
                ;;
            createvol)
                actions+=( "createvol" ); shift
                ;;
            exportdist)
                actions+=( "exportdist" ); shift
                ;;
            help)
                usage && exit 0;
                ;;
            removeimage)
                actions+=( "removeimage" ); shift
                ;;
            removevol)
                actions+=( "removevol" ); shift
                ;;
            --exportdir=*)
                exportdir="${##--exportdir=}"; shift
                ;;
            --latest)
                tag_as_latest="yes"; shift
                ;;
            --variant=*)
                variants+=( "${1##--variant=}" ); shift
                ;;
            #--repository=*)
            #    repositories+=( "${1##--repository=}" ); shift
            #    ;;
            --tag=*)
                tags+=( "${1##--tags=}" ); shift
                ;;
            "")
                die "Missing command"; shift
                ;;
            --*)
                die "Invalid option: $1"; shift
                ;;
            *)
                die "Invalid command: $1"; shift
                ;;
        esac
    done

    if [[ "${#actions[@]}" == 0 ]]; then
        die "Error: no command given. Run '${this_file} help' for usage."
    fi

    if [[ -z "${exportdir}" ]]; then
        exportdir="${DEFAULT_EXPORTDIR}"
    fi

    # The default repository prefix always needs to be built because the
    # default variant's generated default variant's Dockerfile does not use a repository prefix and only the
    # - When one or more --repository flag(s) has been given:
    #
    # dist variant _with_ a repository prefix will exist.
    # was given and both variants are being built. Otherwise, the build of
    # the default variant will fail.
    #local remove_images_in_default_repo=
    #if [[ "${#repositories[@]}" > 0 ]]; then
    #    repositories=( "${DEFAULT_REPOSITORY}" "${repositories[@]}" )
    #else
    ## The --repository flag has not been given, so build _only_ with the
    ## default repository prefix.
    #    repositories=( "${DEFAULT_REPOSITORY}" )
    #fi

    if [[ "${#tags[@]}" == 0 ]]; then
        tags=( "${DEFAULT_TAG}" )
    fi

    if [[ "${#variants[@]}" == 0 ]]; then
        variants=( "${DIST_VARIANT}" "${DEFAULT_VARIANT}" )
    fi

    for action in "${actions[@]}"; do
        for variant in "${variants[@]}"; do
            local image="$(_imageString $REPO_NAME $IMAGE_NAME $IMAGE_TAG $variant)"
            local image_latest=
            if [[ "${tag_as_latest}" == "yes" ]]; then
                image_latest="$(_imageString $REPO_NAME $IMAGE_NAME "latest" $variant)"
            fi
            local file="Dockerfile"
            local name="geosupport-${FULLVER}"
            local command="/bin/true"
            # TODO Set mountpoint dynamically using $GEOSUPPORT_HOME
            local target="@geosupport_basedir@/current"
            if [[ ! "${variant}" == "${DEFAULT_VARIANT}" ]]; then
                file="Dockerfile.${variant}"
                name="geosupport-${variant}-${FULLVER}"
                command=
                if [[ "${variant}" == "${DIST_VARIANT}" ]]; then
                    target="/dist"
                fi
            fi
            local volname="geosupport${name}-${FULLVER}"
            case "$action" in
                build)
                    buildImage "${image}" "${file}"
                    [[ -n "${image_latest}" ]] &&
                        tagImage "${image}" "${image_latest}"
                    ;;
                createvol)
                    createVol "${name}" "${target}" "${image}" "${command}"
                    ;;
                exportdist)
                    if [[ -z "${exported}" ]]; then
                        exportDist "${exportdir}"
                        # Only run this command once
                        exported="yes"
                    fi
                    ;;
                removeimage)
                    [[ -n "${image_latest}" ]] &&
                        removeImage "${image_latest}"
                    removeImage "${image}"
                    ;;
                removevol)
                    removeVol "${name}"
                    ;;
                *)
                    die "Invalid action: $action";
                    ;;
            esac
        done
    done
} # End main

main "$@"
