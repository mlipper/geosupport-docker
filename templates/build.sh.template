#!/usr/bin/env bash

set -Eeuo pipefail

this_dir="$(dirname "$(readlink -vf "$BASH_SOURCE")")"
this_file="$(basename "$0")"

cd "${this_dir}"

#
# Globals
#

declare -a actions=()
declare -a variants=()

OUTDIR="$(readlink -vf ../out)"
DEFAULT_TAG="@image_tag@"
DEFAULT_EXPORTDIR="${OUTDIR}/${DEFAULT_TAG}"
DEFAULT_VARIANT=default
DEFAULT_VOLUME_NAME=
DIST_VARIANT=dist
DIST_VOLUME_NAME=
FULLVER="@geosupport_fullversion@"
IMAGE_NAME="@image_name@"
IMAGE_TAG="@image_tag@"
REPO_NAME="@repo_name@"

#
# Functions
#

die() {
    echo "$*" 1>&2
    exit 1
}

usage() {
    local this_file
    this_file="$(basename "${BASH_SOURCE[0]}")"
cat <<- EOF

Usage: ${this_file} COMMAND [OPTIONS]

Build or remove ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG} images.
Create or remove ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG} volumes.

Commands:

  build         Builds ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG} to the local
                registry using the following template:

                ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}[-<variant>]

            NOTES:

                The --variant=${DEFAULT_VARIANT} option is a special case in
                which the template will be:

                ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}

                Builds are always done against the local repository.

  createvol     Creates one or more named volumes whose names are
                specified by --volname for the "${DEFAULT_VARIANT}" variant
                and/or --distvolname for the "${DIST_VARIANT}".

                If --volname is not given and a volume is being created for
                "${DEFAULT_VARIANT}" variant, the name is defaulted to
                "geosupport-${FULLVER}".

                If --distvolname is not given and a volume is being created
                for "${DIST_VARIANT}" variant, the name is defaulted to
                "geosupport-${DIST_VARIANT}-${FULLVER}".

                Volumes are created for images/container directories
                specified or defaulted using the logic described below
                for the --variants option.

  exportdist    Copy repackaged Geosupport distribution file
                /dist/geosupport-${FULLVER}.tgz to the
                host directory specified by the --exportdir=<hostdir>
                option.

                If the --exportdir=<hostdir> option is not given, <hostdir>
                defaults to '${DEFAULT_EXPORTDIR}'.

  help          Show this usage message and exit.

  removeimage   Deletes one or more whose names are determined by the
                specified --variants.

  removevol     Deletes one or more named volumes whose names are
                specified by --volname for the "${DEFAULT_VARIANT}" variant
                and/or --distvolname for the "${DIST_VARIANT}".

                If --volname is not given and a volume is being deleted for
                "${DEFAULT_VARIANT}" variant, the name is defaulted to
                "geosupport-${FULLVER}".

                If --distvolname is not given and a volume is being deleted
                for "${DIST_VARIANT}" variant, the name is defaulted to
                "geosupport-${DIST_VARIANT}-${FULLVER}".

                Volumes are deleted based on names specified and/or
                default names generated using the logic described below
                when using the --variants option.

Options:

  --volname      The name for the volume created from the '${DEFAULT_VARIANT}'
                 variant.

  --distvolname  The name for the volume created from the '${DIST_VARIANT}'
                 variant.

  --exportdir    The host directory where the Geosupport distribution
                 file will be copied when running the 'exportdist' command.

                 If not given, defaults to '${DEFAULT_EXPORTDIR}'.

  --latest       When given with the 'build' command, successfully built images
                 and image variants will then be tagged as 'latest(-<variant>)'.

                 When given with the 'removeimage' command, any image with a
                 matching 'latest(-<variant>)' tag will be removed.

  --variant      Image variant commands will operate on, ${DIST_VARIANT} or ${DEFAULT_VARIANT}.
                 When this option is not given, the default behavior is to
                 apply commands to both variants.

                 The ${DEFAULT_VARIANT} image variant is built from the ${DIST_VARIANT} image variant
                 and must be available from the local repository for certain
                 commands. See the DEPENDENCIES section below for more details.

                 Commands work as follows for each variant:

                 ${DIST_VARIANT}
                    build, removeimage
                        name: ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-${DIST_VARIANT}
                    createvol, removevol
                        name: geosupport-${DIST_VARIANT}-${FULLVER}
                              Use --distvolname to override
                      source: /dist


                 ${DEFAULT_VARIANT}
                    build, removeimage
                        name: ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}
                    createvol, removevol
                        name: geosupport-${FULLVER}
                              Use --volname to override
                      source: \$GEOSUPPORT_HOME

            DEPENDENCIES:

                build
                    Order: build ${DIST_VARIANT}, build ${DEFAULT_VARIANT}

                    Building the ${DEFAULT_VARIANT} image variant requires that the
                    ${DIST_VARIANT} variant be available from the _local_ repository.
                    If it is not, the build will fail.

                removeimage
                    Order: removeimage ${DEFAULT_VARIANT}, removeimage ${DIST_VARIANT}

                    Removing the ${DIST_VARIANT} image variant requires that the
                    ${DEFAULT_VARIANT} image variant be removed first because it
                    built from the ${DIST_VARIANT} variant. Trying to delete the
                    ${DIST_VARIANT} image variant when the ${DEFAULT_VARIANT} image variant
                    still exists will fail.

EOF
}

#
# $1 repository
# $2 image
# $3 tag
# $4 variant
#
_imageString() {
    local repo="$1"
    local image="$2"
    local tag="$3"
    local variant="$(_fixVariant $4)"
    echo -n "${repo}/${image}:${tag}${variant}"
}

#
# $1 variant name
#
_fixVariant() {
    local variant="$1"
    if [[ "${variant}" == "${DEFAULT_VARIANT}" ]]; then
        variant=""
    else
        variant="-${variant}"
    fi
    echo -n "${variant}"
}

#
# $1 image string (includes repo prefix)
# $2 Dockerfile file
#
buildImage() {
    local image_string="$1"
    local file="$2"
    docker build -t "${image_string}"  -f "${file}" .
}

#
# $1 volname
# $2 target
# $3 image string (includes repo prefix)
# $4 command
#
createVol() {
    local volname="$1"
    local target="$2"
    local image_string="$3"
    local command="$4"
    if [[ "$(docker volume ls -qf name=${volname}\$)" == "${volname}" ]]; then
        die "Volume ${volname} already exists."
    fi
    docker volume create "${volname}"
    if [[ -z "${command}" ]]; then
        # DIST_VARIANT
        docker run --rm --mount "source=${volname},target=${target}"  "${image_string}"
    else
        # DEFAULT_VARIANT
        docker run --rm --mount "source=${volname},target=${target}"  "${image_string}" "${command}"
    fi
}

#
# $1 hostdir
#
exportDist() {
    local hostdir="$1"
    mkdir -p "${hostdir}"
    docker build -t gsdexport:latest -<<EOF
# syntax=docker/dockerfile:1
FROM busybox:glibc
RUN mkdir -p /xfer
COPY --from=${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-${DIST_VARIANT} \
        /dist/geosupport.tgz \
        /dist/geosupport-${FULLVER}.tgz
CMD ["cp", "-v", "/dist/geosupport-${FULLVER}.tgz", "/xfer"]
EOF
    docker run --rm -it --volume="${hostdir}:/xfer:rw" gsdexport:latest
    docker rmi gsdexport:latest
}

#
# $1 name
#
removeImage() {
    local name="$1"
    docker image rm "${name}"
}

#
# $1 name
#
removeVol() {
    local name="$1"
    if [[ "$(docker volume ls -qf name=${name}\$)" != "${name}" ]]; then
        echo "Volume ${name} not found."
        return 0
    fi
    docker volume rm "${name}"
    if [[ $? == 0 ]]; then
        echo "Removed volume ${name}."
    else
        die "Could not remove volume ${name}."
    fi
}

#
# $1 source image
# $2 tag
#
tagImage() {
    local source_image="$1"
    local tag="$2"
    docker tag "${source_image}" "${tag}"
}

main() {

    if [ $# -eq 0 ]; then
        usage
        exit 0
    fi

    local defaultvolname=
    local distvolname=
    local exportdir=
    local exported=
    local tag_as_latest=

    while [ $# -gt 0 ]; do
        case "$1" in
            build)
                actions+=( "build" ); shift
                ;;
            createvol)
                actions+=( "createvol" ); shift
                ;;
            exportdist)
                actions+=( "exportdist" ); shift
                ;;
            help)
                usage | more && exit 0;
                ;;
            removeimage)
                actions+=( "removeimage" ); shift
                ;;
            removevol)
                actions+=( "removevol" ); shift
                ;;
            --distvolname=*)
                distvolname="${1##--distvolname=}"; shift
                ;;
            --exportdir=*)
                exportdir="${1##--exportdir=}"; shift
                ;;
            --latest)
                tag_as_latest="yes"; shift
                ;;
            --variant=*)
                variants+=( "${1##--variant=}" ); shift
                ;;
            --volname=*)
                defaultvolname="${1##--volname=}"; shift
                ;;
            "")
                die "Missing command"; shift
                ;;
            --*)
                die "Invalid option: $1"; shift
                ;;
            *)
                die "Invalid command: $1"; shift
                ;;
        esac
    done

    if [[ "${#actions[@]}" == 0 ]]; then
        die "Error: no command given. Run '${this_file} help' for usage."
    fi

    if [[ -z "${exportdir}" ]]; then
        exportdir="${DEFAULT_EXPORTDIR}"
    fi

    for action in "${actions[@]}"; do

        # Insure correct order of operations for actions where it matters.
        if [[ "${#variants[@]}" == 2 ]]; then
            if [[ "${action}" == "build" ]]; then
                variants=( "${DIST_VARIANT}" "${DEFAULT_VARIANT}" )
            elif [[ "${action}" == "removeimage" ]]; then
                variants=( "${DEFAULT_VARIANT}" "${DIST_VARIANT}" )
            fi
        elif [[ "${#variants[@]}" == 0 ]]; then
            if [[ "${action}" == "exportdist" ]]; then
                variants=( "${DIST_VARIANT}" )
            fi
        fi

        for variant in "${variants[@]}"; do

            local image="$(_imageString ${REPO_NAME} ${IMAGE_NAME} ${IMAGE_TAG} ${variant})"
            local image_latest=
            if [[ "${tag_as_latest}" == "yes" ]]; then
                image_latest="$(_imageString ${REPO_NAME} ${IMAGE_NAME} "latest" ${variant})"
            fi

            local file="Dockerfile"
            local name="geosupport-${FULLVER}"

            # For createvol, removevol
            local command=
            local target=
            local volname=

            if [[ "${variant}" == "${DIST_VARIANT}" ]]; then
            # DIST_VARIANT
                file="Dockerfile.${variant}"
                name="geosupport-${variant}-${FULLVER}"
                if [[ -z "${distvolname}" ]]; then
                    volname="${name}"
                else
                    volname="${distvolname}"
                fi
                command=
                target="/dist"
            elif [[ "${variant}" == "${DEFAULT_VARIANT}" ]]; then
            # DEFAULT_VARIANT
                if [[ -z "${defaultvolname}" ]]; then
                    volname="${name}"
                else
                    volname="${defaultvolname}"
                fi
                command="/bin/true"
                target="@geosupport_basedir@"
            else
                die "Invalid variant ${variant}"
            fi

            case "$action" in
                build)
                    buildImage "${image}" "${file}"
                    [[ -n "${image_latest}" ]] &&
                        tagImage "${image}" "${image_latest}"
                    ;;
                createvol)
                    createVol "${volname}" "${target}" "${image}" "${command}"
                    ;;
                exportdist)
                    if [[ -z "${exported}" ]]; then
                        exportDist "${exportdir}"
                        # Only run this command once
                        exported="yes"
                    fi
                    ;;
                removeimage)
                    [[ -n "${image_latest}" ]] &&
                        removeImage "${image_latest}"
                    removeImage "${image}"
                    ;;
                removevol)
                    removeVol "${volname}"
                    ;;
                *)
                    die "Invalid action: $action";
                    ;;
            esac
        done
    done
} # End main

main "$@"
