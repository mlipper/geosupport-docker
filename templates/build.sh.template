#!/usr/bin/env bash

set -Eeuo pipefail

this_dir="$(dirname "$(readlink -vf "$BASH_SOURCE")")"
this_file="$(basename "$0")"

cd "${this_dir}"

#
# Globals
#

declare -a actions=()
declare -a variants=()

OUTDIR="$(readlink -vf ../out)"
PLATFORM="$(uname -m)"
DEFAULT_TAG="@image_tag@"
DEFAULT_EXPORTDIR="${OUTDIR}/${DEFAULT_TAG}"
DEFAULT_VARIANT=default
DEFAULT_VOLUME_NAME=
DIST_VARIANT=dist
DIST_VOLUME_NAME=
FULLVER="@geosupport_fullversion@"
GEOSUPPORT_BASEDIR="@geosupport_basedir@"
IMAGE_NAME="@image_name@"
IMAGE_TAG="@image_tag@"
REPO_NAME="@repo_name@"

#
# Functions
#

die() {
    echo "$*" 1>&2
    exit 1
}

usage() {
    local this_file
    this_file="$(basename "${BASH_SOURCE[0]}")"
cat <<- EOF

Usage: ${this_file} COMMAND [OPTIONS]

Build images, create or export volumes for ${REPO_NAME}/${IMAGE_NAME} v${IMAGE_TAG}.

Commands:

  build         Builds image version ${IMAGE_TAG} of ${REPO_NAME}/${IMAGE_NAME}.

    Options:    --variant=<name> (optional)

                Specifies that only variant "<name>" be built.

                If the --variant option has not been given, both are built.
                Builds are always done against the local repository.

                --variant=${DIST_VARIANT}
                Builds image ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-${DIST_VARIANT}

                --variant=${DEFAULT_VARIANT}
                Builds image ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}

                When specifying only the "${DEFAULT_VARIANT}" variant,
                the "${DIST_VARIANT}" variant must be available from the
                local repository or the build will fail.

                --latest (optional)

                When given, tags built variants using the "latest" naming
                convention.

                If the "${DIST_VARIANT}" has been built, creates tag
                ${REPO_NAME}/${IMAGE_NAME}:latest-${DIST_VARIANT}.

                If the "${DEFAULT_VARIANT}" has been built, creates tag
                ${REPO_NAME}/${IMAGE_NAME}:latest.

  createvol     Creates a volume from the contents of the \$GEOSUPPORT_BASEDIR
                directory in image ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}
                (i.e., the "${DEFAULT_VARIANT}" variant).

    Options:    --volname=<name> (optional)

                The "<name>" to use when creating the volume.
                If --volname is not given, the name is defaulted to
                "geosupport-${FULLVER}".

  exportdist    Copy repackaged Geosupport distribution file from image
                ${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-${DIST_VARIANT}
                to a host directory.

    Options:    --exportdir=<name> (optional)

                The host directory where the repackaged Geosupport distribution
                file will be copied when running the "exportdist" command.

                If not given, defaults to "${DEFAULT_EXPORTDIR}".

  help          Show this usage message and exit.

EOF
}

#
# $1 repository
# $2 image
# $3 tag
# $4 variant
#
_imageString() {
    local repo="$1"
    local image="$2"
    local tag="$3"
    local variant="$(_fixVariant $4)"
    echo -n "${repo}/${image}:${tag}${variant}"
}

#
# $1 variant name
#
_fixVariant() {
    local variant="$1"
    if [[ "${variant}" == "${DEFAULT_VARIANT}" ]]; then
        variant=""
    else
        variant="-${variant}"
    fi
    echo -n "${variant}"
}

#
# $1 image string (includes repo prefix)
# $2 Dockerfile file
#
buildImage() {
    local image_string="$1"
    local file="$2"
    if [[ "${PLATFORM}" == "amd64" ]]; then
        docker build -t "${image_string}" --no-cache --platform=linux/amd64 -f "${file}" .
    else
        docker buildx build --builder=@builddrv_name@ --no-cache --platform=linux/amd64 -t "${image_string}" -f "${file}" .
    fi
}

#
# $1 volname
# $2 image string (includes repo prefix)
#
createVol() {
    local volname="$1"
    local image_string="$2"
    if [[ "$(docker volume ls -qf name=${volname}\$)" == "${volname}" ]]; then
        die "Volume ${volname} already exists."
    fi
    docker volume create "${volname}"
    docker run --platform=linux/amd64 --rm --mount "type=volume,source=${volname},target=${GEOSUPPORT_BASEDIR}"  "${image_string}" "/bin/true"
}

#
# $1 hostdir
#
exportDist() {
    local hostdir="$1"
    mkdir -p "${hostdir}"
    if [[ "${PLATFORM}" == "amd64" ]]; then
        docker build --platform=linux/amd64 -t gsdexport:latest -<<EOF
# syntax=docker/dockerfile:1
FROM busybox:glibc
RUN mkdir -p /xfer
COPY --from=${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-${DIST_VARIANT} \
        /dist/geosupport.tgz \
        /dist/geosupport-${FULLVER}.tgz
CMD ["cp", "-v", "/dist/geosupport-${FULLVER}.tgz", "/xfer"]
EOF
    else
        docker buildx build --builder=@builddrv_name@ --platform=linux/amd64 -t gsdexport:latest -<<EOF
# syntax=docker/dockerfile:1
FROM busybox:glibc
RUN mkdir -p /xfer
COPY --from=${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}-${DIST_VARIANT} \
        /dist/geosupport.tgz \
        /dist/geosupport-${FULLVER}.tgz
CMD ["cp", "-v", "/dist/geosupport-${FULLVER}.tgz", "/xfer"]
EOF
    fi
    docker run --platform=linux/amd64 --rm -it --volume="${hostdir}:/xfer:rw" gsdexport:latest
    docker rmi gsdexport:latest
}

#
# $1 source image
# $2 tag
#
tagImage() {
    local source_image="$1"
    local tag="$2"
    docker tag "${source_image}" "${tag}"
}

main() {

    if [ $# -eq 0 ]; then
        usage
        exit 0
    fi

    local volname=
    local exportdir=
    local exported=
    local tag_as_latest=

    while [ $# -gt 0 ]; do
        case "$1" in
            build)
                actions+=( "build" ); shift
                ;;
            createvol)
                actions+=( "createvol" ); shift
                ;;
            exportdist)
                actions+=( "exportdist" ); shift
                ;;
            help)
                usage | more && exit 0;
                ;;
            --exportdir=*)
                exportdir="${1##--exportdir=}"; shift
                ;;
            --latest)
                tag_as_latest="yes"; shift
                ;;
            --variant=*)
                variants+=( "${1##--variant=}" ); shift
                ;;
            --volname=*)
                volname="${1##--volname=}"; shift
                ;;
            "")
                die "Missing command"; shift
                ;;
            --*)
                die "Invalid option: $1"; shift
                ;;
            *)
                die "Invalid command: $1"; shift
                ;;
        esac
    done

    if [[ "${#actions[@]}" == 0 ]]; then
        die "Error: no command given. Run '${this_file} help' for usage."
    fi

    for action in "${actions[@]}"; do

        case "${action}" in
            build)
                # Insure correct order of operations for actions where it matters.
                if [[ "${#variants[@]}" == 2 ]] || [[ "${#variants[@]}" == 0 ]]; then
                    variants=( "${DIST_VARIANT}" "${DEFAULT_VARIANT}" )
                fi
                ;;
            createvol)
                variants=( "${DEFAULT_VARIANT}" )
                if [[ -z "${volname}" ]]; then
                    volname="geosupport-${FULLVER}"
                fi
                ;;
            exportdist)
                variants=( "${DIST_VARIANT}" )
                if [[ -z "${exportdir}" ]]; then
                    exportdir="${DEFAULT_EXPORTDIR}"
                fi
                ;;
            *)
                die "Invalid command: ${action}";
                ;;
        esac

        for variant in "${variants[@]}"; do

            local image="$(_imageString ${REPO_NAME} ${IMAGE_NAME} ${IMAGE_TAG} ${variant})"

            case "$action" in
                build)
                    local image_latest=
                    [[ "${tag_as_latest}" == "yes" ]] &&
                        image_latest="$(_imageString ${REPO_NAME} ${IMAGE_NAME} "latest" ${variant})"

                    local file="Dockerfile"
                    [[ "${variant}" == "${DIST_VARIANT}" ]] &&
                        file="Dockerfile.${variant}"

                    buildImage "${image}" "${file}"

                    [[ -n "${image_latest}" ]] &&
                        tagImage "${image}" "${image_latest}"
                    ;;
                createvol)
                    createVol "${volname}" "${image}"
                    ;;
                exportdist)
                    if [[ -z "${exported}" ]]; then
                        exportDist "${exportdir}"
                        # Only run this command once
                        exported="yes"
                    fi
                    ;;
                *)
                    die "Invalid action: $action";
                    ;;
            esac
        done
    done
} # End main

main "$@"
