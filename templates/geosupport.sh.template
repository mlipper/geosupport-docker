#!/usr/bin/env bash

set -Eeuo pipefail

this_dir="$(dirname "$(readlink -vf "$BASH_SOURCE")")"
this_file="$(basename "$0")"

cd "${this_dir}"

#
# Globals
#

declare -a commands

#
# Functions
#

die() {
    echo "$*" 1>&2
    exit 1
}

usage() {
    local this_file
    this_file="$(basename "${BASH_SOURCE[0]}")"
cat <<- EOF

Usage: ${this_file} [COMMAND [OPTIONS]]

Run, install or show information about Geosupport

Commands:
  environment   Print Geosupport environment variable names and current values.

  goat          Run a simple client for using Geosupport interactively from
                the command line. Fails if Geosupport has not been installed.

  help          Show this usage message and exit.

  install       Create soft links for Geosupport binaries and shared libs
                under /usr/local/bin and /usr/local/lib respectively.
                After shared libraries are symlinked, ldconfig is called
                to update the ld cache.

  version       Print Geosupport release and version information.

EOF
}

_create_currentln() {
    [[ -d "${GEOSUPPORT_BASEDIR}" ]] || die "GEOSUPPORT_BASEDIR directory ${GEOSUPPORT_BASEDIR} does not exist."
    # Save current directory
    local oldpwd="$(pwd)"
    cd "${GEOSUPPORT_BASEDIR}"
    local geosupport_versiondir="${GEOSUPPORT_BASEDIR}/version-${GEOSUPPORT_FULLVERSION}"
    [[ -d "${geosupport_versiondir}" ]] || die "Version directory ${geosupport_versiondir} does not exist."
    # Disable exit on error
    set +e
    # Note use of -e and trailing / will check if current is a link to a
    # directory and fail silently if not.
    if readlink -e "${GEOSUPPORT_HOME}/"; then
    # Link already exists
        local existingln=$(readlink -e "${GEOSUPPORT_HOME}/")
        echo "GEOSUPPORT_HOME symbolic link directory ${GEOSUPPORT_HOME} already exists."
        echo "Checking whether it needs to be recreated..."
        # Re-enable exit on error
        set -e
        if [[ "${existingln}" == "${geosupport_versiondir}" ]]; then
        # Link already exists and points to correct version dir: do nothing
            echo "GEOSUPPORT_HOME references the correct version directory ${existingln} and will not be recreated."
            return
        fi
        echo "GEOSUPPORT_HOME ${existingln} references the wrong version directory and will be deleted."
        # Link already exists but points to different version dir: delete it
        rm -f "${GEOSUPPORT_HOME}"
    fi
    # Re-enable exit on error
    set -e
    # Create the current link
    ln -s "$(basename ${geosupport_versiondir})" "${GEOSUPPORT_HOME}"
    echo "Created GEOSUPPORT_HOME symbolic link:"
    echo "${GEOSUPPORT_HOME} -> $(readlink -vf "${GEOSUPPORT_HOME}")"
    # Go back to original directory
    cd "${oldpwd}"
}

_createln() {
    [[ "$#" -gt 1 ]] || die "$0: directory and 1 or more file names required.";
    dname="$1"
    shift
    cd "/usr/local/${dname}"
    for f in "$@"; do
        echo "creating link /usr/local/${dname}/${f} -> ${GEOSUPPORT_HOME}/${dname}/${f}";
        ln -svL  "${GEOSUPPORT_HOME}/${dname}/${f}" "${f}";
    done;
    cd "${this_dir}"
}

_env() {
cat <<- EOF

Geosupport Environment Variables
--------------------------------

GEOSUPPORT_BASEDIR=${GEOSUPPORT_BASEDIR}
   GEOSUPPORT_HOME=${GEOSUPPORT_HOME}
          GEOFILES=${GEOFILES}
       GS_BIN_PATH=${GS_BIN_PATH}
   GS_LIBRARY_PATH=${GS_LIBRARY_PATH}
   GS_INCLUDE_PATH=${GS_INCLUDE_PATH}

EOF
}

_goat() {
    "${GEOSUPPORT_HOME}/bin/goat"
}

_install() {
    _create_currentln
    _createln 'bin' 'geosupport'
    local sofiles=$(ls -1 $GEOSUPPORT_HOME/lib/*.so | xargs basename -s $GEOSUPPORT_HOME | tr '\n' ' ')
    _createln 'lib' ${sofiles[$@]}
    ldconfig
}

_version() {
cat <<- EOF
# @buildtimestamp@

Geosupport @geosupport_fullversion@
-----------------------------------

     Release: @geosupport_release@
       Patch: @geosupport_patch@
       Major: @geosupport_major@
       Minor: @geosupport_minor@

        Arch: x86_64, amd64
        Name: Geosupport for Linux

Geosupport is written and maintained by the NYC Department of City Planning.
https://www1.nyc.gov/site/planning/data-maps/open-data.page#geocoding_application


@image_name@:@image_tag@
-----------------------------------

This distribution was generated using the geosupport-docker project
by Matthew Lipper.
https://github.com/mlipper/geosupport-docker
https://hub.docker.com/r/mlipper/geosupport-docker


EOF
}

main() {

    [ $# -eq 0 ] && usage

    while [ $# -gt 0 ]; do
        case "$1" in
            -e | environment)
                commands+=( "environment" ); shift
                ;;
            -g | goat)
                commands+=( "goat" ); shift
                ;;
            -h | help)
                commands+=( "help" ); shift
                ;;
            -i | install)
                commands+=( "install" ); shift
                ;;
            -v | version)
                commands+=( "version" ); shift
                ;;
            *)
                die "Invalid argument: $1"; shift
                ;;
        esac
    done

    source "@geosupport_basedir@/version-@geosupport_fullversion@/bin/geosupport.env"

    for cmd in "${commands[@]}"; do
        case "${cmd}" in
            environment)
                _env ;;
            goat)
                _goat ;;
            help)
                usage ;;
            install)
                _install ;;
            version)
                _version ;;
            *)
                die "Unknown command "${cmd}"" ;;
        esac
    done
} # End main

main "$@"
