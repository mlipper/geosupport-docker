#!/usr/bin/env bash

set -Eeuo pipefail

this_dir="$(dirname "$(readlink -vf "$BASH_SOURCE")")"
this_file="$(basename "$0")"

cd "${this_dir}"

#
# Globals
#

declare -a commands

ENV_FILE="${this_dir}/geosupport.env"
GEOSUPPORT_FULLVERSION="@geosupport_fullversion@"
VERBOSE=
VERSION_DIR="version-${GEOSUPPORT_FULLVERSION}"

#
# Functions
#

die() {
    echo "[ERROR] $*" 1>&2
    exit 1
}

log() {
    if [[ -n "${VERBOSE}" ]]; then
        echo "$*"
    fi
}

usage() {
    local this_file
    this_file="$(basename "${BASH_SOURCE[0]}")"
cat <<- EOF

Usage: ${this_file} [COMMAND [OPTIONS]]

Run, install or show information about Geosupport

Commands:
  currentln     Create a soft link named 'current' to the ${VERSION_DIR}
                directory. This link is created under the same parent directory as
                ${GEOSUPPORT_FULLVERSION} as a sibling using the implied './'
                relative path.

  environment   Print Geosupport environment variable names and current values.

  goat          Run a simple client for using Geosupport interactively from
                the command line. Fails if Geosupport has not been installed.

  help          Show this usage message and exit.

  install       Create soft links for Geosupport binaries and shared libs
                under /usr/local/bin and /usr/local/lib respectively.
                After shared libraries are symlinked, ldconfig is called
                to update the ld cache.

                If necessary, creates soft link 'current'. See the description
                for command 'currentln'.

  version       Print Geosupport release and version information.

Options:
  -v (optional) Enable more verbose logging to stdout.

  -w (optional) Recreate and source the geosupport.env file based on the actual
                path of \$GEOSUPPORT_BASE. This is determined from the assumption
                that the path of this file is:
                \$GEOSUPPORT_BASE/${VERSION_DIR}/${this_file}
EOF
}

_create_current_ln() {
    [[ -d "${GEOSUPPORT_BASEDIR}" ]] || die "GEOSUPPORT_BASEDIR directory ${GEOSUPPORT_BASEDIR} does not exist."
    # Save current directory
    local oldpwd="$(pwd)"
    cd "${GEOSUPPORT_BASEDIR}"
    local versiondir_path="${GEOSUPPORT_BASEDIR}/${VERSION_DIR}"
    [[ -d "${versiondir_path}" ]] || die "Version directory ${versiondir_path} does not exist."
    # Disable exit on error
    set +e
    # Note use of -e and trailing / will check if current is a link to a
    # directory and fail silently if not.
    if readlink -e "${GEOSUPPORT_HOME}/"; then
    # Link already exists
        local existing_ln=$(readlink -e "${GEOSUPPORT_HOME}/")
        if [[ "${existing_ln}" == "${versiondir_path}" ]]; then
        # Link already exists and points to correct version dir: do nothing
            log "[INFO] GEOSUPPORT_HOME references the correct version directory ${existing_ln} and will not be recreated."
        else
            # Link already exists but points to different version dir
            rm -f "${GEOSUPPORT_HOME}"
            ln -s "$(basename ${versiondir_path})" "${GEOSUPPORT_HOME}"
            log "[WARN] Recreated symlink for GEOSUPPORT_HOME ${existing_ln} because it referenced the wrong version directory."
        fi
    else
    # Create the current link
        ln -s "$(basename ${versiondir_path})" "${GEOSUPPORT_HOME}"
        log "[INFO] Symlinked \$GEOSUPPORT_HOME: ${GEOSUPPORT_HOME} -> $(readlink -vf "${GEOSUPPORT_HOME}")"
    fi
    # Re-enable exit on error
    set -e
    # Go back to original directory
    cd "${oldpwd}"
}

#
# Writes file geosupport.env in the same directory as this
# script. The file exports Geosupport environment variables
# with the assumption that the GEOSUPPORT_BASE directory is
# the grandparent directory of this file.
#
# Note, that the value for variable GEOSUPPORT_FULLVERSION in
# the generated env file is not dynamic. The value of the
# global variable in this script with the same name is a
# constant, populated with a literal when file file is
# generated.
#
_create_envfile() {
    [[ -f "${ENV_FILE}" ]] && rm "${ENV_FILE}"
cat <<- EOF > "${ENV_FILE}"
#!/usr/bin/env bash

export GEOSUPPORT_BASEDIR="$(dirname "$(readlink -vf "${this_dir}/..")")"
export GEOSUPPORT_HOME="\${GEOSUPPORT_BASEDIR}/current"
export GEOSUPPORT_FULLVERSION="${GEOSUPPORT_FULLVERSION}"
# Trailing "/" required
export GEOFILES="\${GEOSUPPORT_HOME}/fls/"
export GS_BIN_PATH="\${GEOSUPPORT_HOME}/bin"
export GS_LIBRARY_PATH="\${GEOSUPPORT_HOME}/lib"
export GS_INCLUDE_PATH="\${GEOSUPPORT_HOME}/include"

EOF
    chmod +x "${ENV_FILE}"
    log "[INFO] Wrote env file: ${ENV_FILE}"
}

_create_local_system_ln() {
    [[ "$#" -gt 1 ]] || die "$0: directory and 1 or more file names required.";
    dname="$1"
    shift
    cd "/usr/local/${dname}"
    log "[INFO] Creating Geosupport symlinks in $(pwd)";
    for f in "$@"; do
        local ln_target="${GEOSUPPORT_HOME}/${dname}/${f}"
        local ln_fullpath="/usr/local/${dname}/${f}"
        if readlink -e "${f}"; then
        # Link already exists
            local existing_ln="$(readlink -e "${f}")"
            if [[ "${existing_ln}" == "${ln_target}" ]]; then
                log "[WARN] Skipped creation of symlink '${ln_fullpath}' -> '${ln_target}' because it exists."
            else
                log "[WARN] Removing and recreating symlink '${ln_fullpath}' -> '${ln_target}' because it references the wrong file."
                rm -f "${f}"
                ln -svL  "${ln_target}" "${f}";
            fi
        else
            ln -svL  "${ln_target}" "${f}";
        fi
    done;
    log "[INFO] Geosupport symlinks in $(pwd) complete.";
    cd "${this_dir}"
}

_env() {
cat <<- EOF

Geosupport Environment Variables
--------------------------------

    GEOSUPPORT_BASEDIR=${GEOSUPPORT_BASEDIR}
       GEOSUPPORT_HOME=${GEOSUPPORT_HOME}
GEOSUPPORT_FULLVERSION=${GEOSUPPORT_FULLVERSION}
              GEOFILES=${GEOFILES}
           GS_BIN_PATH=${GS_BIN_PATH}
       GS_LIBRARY_PATH=${GS_LIBRARY_PATH}
       GS_INCLUDE_PATH=${GS_INCLUDE_PATH}

EOF
}

_goat() {
    "${GEOSUPPORT_HOME}/bin/goat"
}

_install() {
    _create_current_ln
    _create_local_system_ln 'bin' 'geosupport'
    local sofiles=$(ls -1 $GEOSUPPORT_HOME/lib/*.so | xargs basename -s $GEOSUPPORT_HOME | tr '\n' ' ')
    _create_local_system_ln 'lib' ${sofiles[$@]}
    ldconfig
}

_version() {
cat <<- EOF
# @buildtimestamp@

Geosupport ${GEOSUPPORT_FULLVERSION}
-----------------------------------

     Release: @geosupport_release@
       Patch: @geosupport_patch@
       Major: @geosupport_major@
       Minor: @geosupport_minor@

        Arch: x86_64, amd64
        Name: Geosupport for Linux

Geosupport is written and maintained by the NYC Department of City Planning.
https://www1.nyc.gov/site/planning/data-maps/open-data.page#geocoding_application


@image_name@:@image_tag@
-----------------------------------

This distribution was generated using the geosupport-docker project
by Matthew Lipper.
https://github.com/mlipper/geosupport-docker
https://hub.docker.com/r/mlipper/geosupport-docker


EOF
}

main() {

    [ $# -eq 0 ] && usage

    local writeenv=""

    while [ $# -gt 0 ]; do
        case "$1" in
            currentln)
                commands+=( "currentln" ); shift
                ;;
            environment)
                commands+=( "environment" ); shift
                ;;
            goat)
                commands+=( "goat" ); shift
                ;;
            help)
                commands+=( "help" ); shift
                ;;
            install)
                commands+=( "install" ); shift
                ;;
            version)
                commands+=( "version" ); shift
                ;;
            -v)
                VERBOSE="true"; shift
                ;;
            -w)
                writeenv="true"; shift
                ;;
            *)
                die "Invalid argument: $1"; shift
                ;;
        esac
    done

    log "[INFO] Loading ${this_dir}/${this_file}"

    if [[ ! -f "${ENV_FILE}" ]] || [[ "${writeenv}" == "true" ]]; then
        log "[INFO] Writing new env file: ${ENV_FILE}"
        _create_envfile
    fi
    source "${this_dir}/geosupport.env"

    for cmd in "${commands[@]}"; do
        case "${cmd}" in
            currentln)
                _create_current_ln ;;
            environment)
                _env ;;
            goat)
                _goat ;;
            help)
                usage ;;
            install)
                _install ;;
            version)
                _version ;;
            *)
                die "Unknown command "${cmd}"" ;;
        esac
    done
} # End main

main "$@"
